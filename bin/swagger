#!/usr/bin/env php
<?php
/**
 * @license  http://www.apache.org/licenses/LICENSE-2.0
 *           Copyright [2012] [Robert Allen]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This is more intended as an example than anything else however it does
 * provide functionality to generate the json files as static entities as part
 * of a deployment process etc.
 */
function includeIfExists($file)
{
    if (file_exists($file)) {
        return include $file;
    }
}
if ( !($loader = includeIfExists(dirname(__DIR__) . '/vendor/autoload.php')) // Local vendor-dir (swagger-php/vendor/)
    && !($loader = includeIfExists(__DIR__ . '/../../../autoload.php')) // Project vendor-dir (swagger installed as dependancy)
) {
    die(<<<'EOT'
You must set up the project dependencies, run the following commands:
wget http://getcomposer.org/composer.phar
php composer.phar install

EOT
    );
}
try {
    // Possible options and their default values.
    $options = array(
        'output' => getcwd(),
        'exclude' => null,
        'bootstrap' => false,
        'pretty-print' => false,
        'default-base-path' => false,
        'default-api-version' => false,
        'default-swagger-version' => false,
        'resource-base-path' => false,
        'version' => false,
        'help' => false,
        'debug' => false,
    );
    $aliases = array(
        'o' => 'output',
        'e' => 'exclude',
        'b' => 'bootstrap',
        'v' => 'version',
        'h' => 'help',
    );
    $needsArgument = array(
        'output',
        'exclude',
        'bootstrap',
        'default-base-path',
        'default-api-version',
        'default-swagger-version',
        'resource-base-path',
    );
    $paths = array();
    // Parse cli arguments
    for ($i = 1; $i < $argc; $i++) {
        $arg = $argv[$i];
        if (substr($arg, 0, 2) === '--') { // longopt
            $option = substr($arg, 2);

        } elseif ($arg[0] === '-') { // shortopt
            if (array_key_exists(substr($arg, 1), $aliases)) {
                $option = $aliases[$arg[1]];
            } else {
                throw new RuntimeException('Unknown option: "'.$arg.'"');
            }
        } else {
            $paths[] = $arg;
            continue;
        }
        if (array_key_exists($option, $options) === false) {
            throw new RuntimeException('Unknown option: "'.$arg.'"');
        }
        if (in_array($option, $needsArgument)) {
            if (empty($argv[$i + 1]) || $argv[$i + 1][0] === '-') {
                throw new RuntimeException('Missing argument for "'.$arg.'"');
            }
            $options[$option] = $argv[$i + 1];
            $i++;
        } else {
            $options[$option] = true;
        }
    }
    $version = trim(file_get_contents(__DIR__.'/../VERSION'));
    if ($options['version']) {

        echo $version, PHP_EOL;
        exit;
    }
    echo 'Swagger-PHP ', $version, PHP_EOL;
    echo '-----------------', PHP_EOL;

    if ($argc === 1 || $options['help']) {
        echo <<<EOF
Generate Swagger JSON documents for a PHP project.

Usage: swagger /path/to/project [--output /path/to/docs] ...

  -o, --output        Directory to store the generated json documents.
  -e, --exclude       Exclude path(s).
                         ex: --exclude vendor:library/Zend:library/Foo
  -b, --bootstrap     Bootstrap php file(s) for defining constants, etc.
                         ex: --bootstrap autoload.php:config/contants.php
  --pretty-print      JSON output in readable formatting (Pretty Print)

  --default-base-path        Provide a default basePath for the resources
  --default-api-version      Provide a default apiVersion for the resources
  --default-swagger-version  Provide a default swaggerVersion for the resources
  --resource-base-path       Provide the basePath of the resource description files

  -v, --version       Swagger-PHP version
  -h, --help          This help message


EOF;
        exit;
    }
    if ($options['exclude']) {
        $excludePaths = explode(':', $options['exclude']);
        foreach ($excludePaths as $index => $excludePath) {
            if (DIRECTORY_SEPARATOR != substr($excludePath, 0, 1)) {
                $excludePaths[$index] = getcwd() . DIRECTORY_SEPARATOR . $excludePath;
            }
        }
        $excludePath = implode(':', $excludePaths);
    } else {
        $excludePath = null;
    }
    if ($options['bootstrap']) {
        /* @var  \Composer\Autoload\ClassLoader $loader */
        foreach (explode(',', $option['bootstrap']) as $incPath) {
            @list($namespace, $inclusionPath) = explode(':', $incPath);
            $loader->add($namespace, array($inclusionPath ? : '.'));
            if (!$inclusionPath && is_file($incPath)) {
                require_once($incPath);
            }
        }
    }
    if (count($paths) === 0) {
        throw new RuntimeException('A path must be provided');
    } elseif (count($paths) !== 1) {
        throw new RuntimeException('multiple paths are not (yet) supported');
    }
    $projectPath = realpath($paths[0]);
    if ($projectPath === false) {
        throw new RuntimeException('Path "'.$paths[0].'" not found');
    }
    $outputPath = $options['output'].DIRECTORY_SEPARATOR;
    $prettyPrint = $options['pretty-print'];

    \Swagger\Logger::getInstance()->log = function ($entry, $type) {
        $type = $type === E_USER_NOTICE ? 'INFO' : 'WARN';
        if ($entry instanceof Exception) {
            $entry = $entry->getMessage();
        }
        echo '[', $type, '] ', $entry, PHP_EOL;
    };
    $swagger = \Swagger\Swagger::discover($projectPath, $excludePath);

    if ($options['default-base-path']) {
        $swagger->setDefaultBasePath($options['default-base-path']);
    }
    if ($options['default-api-version']) {
        $swagger->setDefaultApiVersion($options['default-api-version']);
    }
    if ($options['default-swagger-version']) {
        $swagger->setDefaultSwaggerVersion($options['default-swagger-version']);
    }
    if ($options['resource-base-path']) {
        $swagger->setResourceBasePath($options['resource-base-path']);
    }
    $resourceName = false;
    $output = array();
    foreach ($swagger->getResourceNames() as $resourceName) {
        $json = $swagger->getResource($resourceName, $prettyPrint);
        $resourceName = str_replace(DIRECTORY_SEPARATOR, '-', ltrim($resourceName, DIRECTORY_SEPARATOR));
        $output[$resourceName] = $json;
    }
    if ($output) {
        if (file_exists($outputPath) && !is_dir($outputPath)) {
            throw new RuntimeException(
                sprintf('[%s] is not a directory', $outputPath)
            );
        } else {
            if (!file_exists($outputPath) && !mkdir($outputPath, 0755, true)) {
                throw new RuntimeException(
                    sprintf('[%s] is not writeable', $outputPath)
                );
            }
            if (!file_exists($outputPath . DIRECTORY_SEPARATOR . 'resources') &&
                !mkdir($outputPath . DIRECTORY_SEPARATOR . 'resources', 0755, true)) {
                throw new RuntimeException(
                    sprintf('[%s] is not writeable', $outputPath . DIRECTORY_SEPARATOR . 'resources')
                );
            }
        }
        if (file_put_contents($outputPath . 'api-docs.json', $swagger->getResourceList($prettyPrint))) {
            echo 'Created ', $outputPath, 'api-docs.json', PHP_EOL;
        }
        foreach ($output as $name => $json) {
            $name = DIRECTORY_SEPARATOR . str_replace(DIRECTORY_SEPARATOR, '-', ltrim($name, DIRECTORY_SEPARATOR));
            $filename = $outputPath . 'resources' . $name . '.json';
            echo 'Created ', $filename , PHP_EOL;
            file_put_contents($filename, $json);
        }
        echo PHP_EOL;
    } else {
        throw new RuntimeException('no valid resources found');
    }
} catch (Exception $e) {
    echo '[ERROR] ', $e->getMessage();
    if ($options['debug']) {
        echo ' in ', $e->getFile(), ' on line ', $e->getLine();
    }
    echo PHP_EOL, PHP_EOL;
    exit(1);
}
