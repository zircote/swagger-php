import{_ as t,c as o,o as r,aj as a}from"./chunks/framework.B72pWmSA.js";const h=JSON.parse('{"title":"Reference","description":"","frontmatter":{},"headers":[],"relativePath":"reference/index.md","filePath":"reference/index.md"}'),n={name:"reference/index.md"};function s(i,e,c,p,d,l){return r(),o("div",null,[...e[0]||(e[0]=[a('<h1 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">â€‹</a></h1><p>In total there are a number of different aspects to using <code>swagger-php</code>. Depending on how custom your requirements are this might be limited to just annotating your code and using the command line tool.</p><p>However, <code>swagger-php</code> offers more.</p><ul><li><p><a href="./attributes.html">Attributes</a></p><p>The new way of adding meta-data to your codebase. Requires PHP 8.1</p></li><li><p><a href="./annotations.html">Docblock annotations</a></p><p>The &#39;traditional&#39; way of documenting your API.</p></li><li><p>The <a href="./generator.html"><code>Generator</code></a></p><p>The <code>\\OpenAPI\\Generator</code> class is the main entry point to programmatically generate OpenAPI documents from your code.</p></li><li><p><a href="./processors.html">Processors</a></p><p><code>swagger-php</code> comes with a list of pre-defined processors that convert the raw data to a complete OpenAPI document. Custom processors can be added or existing removed to tweak swagger-php` to your requirements.</p></li></ul>',4)])])}const f=t(n,[["render",s]]);export{h as __pageData,f as default};
