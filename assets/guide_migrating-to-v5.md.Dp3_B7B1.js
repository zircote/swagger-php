import{_ as o,c as a,o as r,aj as t}from"./chunks/framework.B72pWmSA.js";const m=JSON.parse('{"title":"Migrating to v5","description":"","frontmatter":{},"headers":[],"relativePath":"guide/migrating-to-v5.md","filePath":"guide/migrating-to-v5.md"}'),i={name:"guide/migrating-to-v5.md"};function n(s,e,d,c,l,p){return r(),a("div",null,[...e[0]||(e[0]=[t('<h1 id="migrating-to-v5" tabindex="-1">Migrating to v5 <a class="header-anchor" href="#migrating-to-v5" aria-label="Permalink to &quot;Migrating to v5&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>v5 is mostly a cleanup release with updated dependencies. The main changes are:</p><ul><li>Minimum required PHP version is now 7.4</li><li>The legacy <code>TokenAnalyser</code> and the <code>--legacy</code> CLI option have been removed</li><li>Defaults now prefer attributes over annotations</li><li>PHP parsing now uses <code>nikic/php-parser</code></li><li>Removal of deprecated features <ul><li>empty/unused <code>ProcessorInterface</code></li><li><code>Context::clone()</code> and <code>Context::detect()</code></li><li><code>\\Openapi\\Generator::getProcessors()</code> and <code>\\Openapi\\Generator::setProcessors()</code></li></ul></li></ul><p>For most installations upgrading should not require any changes.</p><h2 id="removed-deprecated-elements" tabindex="-1">Removed deprecated elements <a class="header-anchor" href="#removed-deprecated-elements" aria-label="Permalink to &quot;Removed deprecated elements&quot;">​</a></h2><h3 id="openapi-generator-getprocessors-and-openapi-generator-setprocessors" tabindex="-1"><code>\\Openapi\\Generator::getProcessors()</code> and <code>\\Openapi\\Generator::setProcessors()</code> <a class="header-anchor" href="#openapi-generator-getprocessors-and-openapi-generator-setprocessors" aria-label="Permalink to &quot;`\\Openapi\\Generator::getProcessors()` and `\\Openapi\\Generator::setProcessors()`&quot;">​</a></h3><p>Use <code>getProcessorPipeline()</code> and <code>setProcessorPipeline(new Pipeline(...))</code> methods instead</p>',8)])])}const u=o(i,[["render",n]]);export{m as __pageData,u as default};
