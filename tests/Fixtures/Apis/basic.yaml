openapi: 3.1.0
info:
  title: 'Basic single file API'
  license:
    name: MIT
    identifier: MIT
  version: 1.0.0
servers:
  -
    url: 'https://localhost/api'
    description: 'API server'
  -
    url: 'https://example.localhost'
    description: 'The local environment.'
  -
    url: 'https://example.com'
    description: 'The production server.'
paths:
  '/products/{product_id}':
    get:
      tags:
        - products
      summary: 'Get a product.'
      operationId: getProducts
      parameters:
        -
          name: product_id
          in: path
          description: 'The product id.'
          required: false
          schema:
            type: int
      responses:
        '200':
          description: 'successful operation'
          headers:
            X-Rate-Limit:
              description: 'calls per hour allowed by the user'
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: oops
  /products:
    get:
      tags:
        - products
        - catalog
      summary: 'Get all.'
      operationId: getAll
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Product' } }
                type: object
        '401':
          description: oops
    post:
      tags:
        - products
      summary: 'Add products'
      description: 'Add a product.'
      operationId: addProducts
      requestBody:
        description: 'New product'
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /subscribe:
    post:
      tags:
        - products
      summary: 'Subscribe to product webhook'
      operationId: subscribe
      parameters:
        -
          name: callbackUrl
          in: query
      responses:
        '200':
          description: 'callbackUrl registered'
      callbacks:
        onChange:
          '{$request.query.callbackUrl}':
            post:
              requestBody:
                description: 'subscription payload'
                content:
                  application/json: { schema: { properties: { timestamp: { description: 'time of change', type: string, format: date-time } } } }
            responses:
              '200':
                description: 'Your server implementation should return this HTTP status code if the data was received successfully'
components:
  schemas:
    Colour:
      description: 'A Colour.'
      type: string
      enum:
        - GREEN
        - BLUE
        - RED
    NameTrait:
      description: 'A Name.'
      properties:
        name:
          description: 'The name.'
      type: object
    Product:
      title: Product
      description: 'A Product.'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/NameTrait'
        -
          properties:
            quantity:
              type: integer
            brand:
              type:
                - string
                - 'null'
              default: null
              example: null
            colour:
              $ref: '#/components/schemas/Colour'
            id:
              description: 'The id.'
              format: int64
              example: 1
            releasedAt:
              type: string
            kind:
              description: 'The kind.'
              type: string
              const: Virtual
  securitySchemes:
    bearerAuth:
      type: http
      description: 'Basic Auth'
      scheme: bearer
security:
  -
    bearerAuth: []
tags:
  -
    name: products
    description: 'All about products'
  -
    name: catalog
    description: 'Catalog API'
